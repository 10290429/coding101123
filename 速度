using namespace std;
#define SDL_MAIN_INCLUDED
#include <iostream>
#include<Windows.h>
#include<stdio.h>
#include<SDL.h>
#include <SDL_image.h>
#undef main
#include <cstring>
#include <cstdlib>
#include <time.h>
int start = 0;
int globalscore = 0;
int speed_fall = 50;
int speed_fall2 = 60;
int speed_fall3 = 70;
int speed_fallbump = 30;
int speed_fallbump2 = 30;

SDL_Renderer* renderer;
SDL_Window* window;
bool isRunning;
bool fullscreen;
void handleEvents();
void update();
void render();
void startpage();

int windowW, windowH;


SDL_Event event;

class TextureManager {
public:
    static SDL_Texture* LoadTexture(const char* fileName, SDL_Renderer* ren);

};

class GameObject {
public:
    GameObject(const char* texturesheet, SDL_Renderer* ren, double x, double y, int h, int w);
    ~GameObject();
    void Update();
    void Update2();
    void Update3();
    void Updatestar0();
    void Updatestar1();
    void Updatestar2();
    void Updatestar3();
    void Updatestar4();
    void Updatestar5();


    void Fall();
    void Fall2();
    void Fall3();
    void Fallbump();
    void Fallbump2();

    void Render();

private:
    double xpos;
    double ypos;
    int objH;
    int objW;

    SDL_Texture* objTexture;
    SDL_Rect srcRect, destRect;
    SDL_Renderer* renderer;
};

SDL_Texture* TextureManager::LoadTexture(const char* fileName, SDL_Renderer* ren)
{
    SDL_Surface* tempSurface = IMG_Load(fileName);
    SDL_Texture* tex = SDL_CreateTextureFromSurface(ren, tempSurface);
    SDL_FreeSurface(tempSurface);

    return tex;
}

GameObject::GameObject(const char* texturesheet, SDL_Renderer* ren, double x, double y, int h, int w)
{
    renderer = ren;
    objTexture = TextureManager::LoadTexture(texturesheet, ren);

    xpos = x;
    ypos = y;
    objH = h;
    objW = w;
}
double* px1, * py1;
void GameObject::Update()
{
    srcRect.h = objH;
    srcRect.w = objW;

    srcRect.h = 1248.0;
    srcRect.w = 1728.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    px1 = &xpos;
    py1 = &ypos;
    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

    switch (event.type)
    {
    case SDL_KEYDOWN:
        switch (event.key.keysym.sym)
        {
        case SDLK_w:
            ypos += -10;
            break;

        case SDLK_LEFT:
            if (xpos >= -195)
                xpos += -15;
            break;
        case SDLK_RIGHT:
            if (xpos <= 425)
                xpos += 15;
            break;

        case SDLK_s:
            ypos += 10;
            break;
        default:
            break;
        }
    case SDL_KEYUP:
        switch (event.key.keysym.sym)
        {
        case SDLK_w:
            xpos += 0;
            break;
        case SDLK_a:
            xpos += 0;
            break;
        case SDLK_d:
            ypos += 0;
            break;
        case SDLK_s:
            ypos += 0;
            break;
        default:
            break;
        }
    }
}

void GameObject::Update2()
{

    srcRect.h = 1800.0;
    srcRect.w = 2400.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

}
void GameObject::Update3()
{

    srcRect.h = 1800.0;
    srcRect.w = 2400.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

}
void GameObject::Updatestar0()
{

    srcRect.h = 1800.0;
    srcRect.w = 2400.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

}
void GameObject::Updatestar1()
{

    srcRect.h = 1800.0;
    srcRect.w = 2400.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

}
void GameObject::Updatestar2()
{

    srcRect.h = 1800.0;
    srcRect.w = 2400.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

}
void GameObject::Updatestar3()
{

    srcRect.h = 1800.0;
    srcRect.w = 2400.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

}
void GameObject::Updatestar4()
{

    srcRect.h = 1800.0;
    srcRect.w = 2400.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

}
void GameObject::Updatestar5()
{

    srcRect.h = 1800.0;
    srcRect.w = 2400.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

}

double* fx1 = nullptr, * fy1 = nullptr, * fx2 = nullptr, * fy2 = nullptr, * fx3 = nullptr, * fy3 = nullptr, * bx1 = nullptr, * by1 = nullptr, * bx2 = nullptr, * by2 = nullptr;



void GameObject::Fall()
{
    srcRect.h = 1800.0;
    srcRect.w = 2400.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    if (start == 1) {
        fx1 = &xpos;
        fy1 = &ypos;
    }

    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

    for (int i = 0; i < speed_fall; i++)
    {
        if ((i / 2 == 0)) {
            continue;
        }
        else if (xpos > 350) {
            xpos = 10;
        }
        else if (ypos < 400)
        {
            ypos += 0.08;
        }
        else if (ypos <= 450)
        {
            ypos = -400.0;
            xpos += 30;
            speed_fall = speed_fall + 2;
        }
    }
}


void GameObject::Fall2()
{
    srcRect.h = 1800.0;
    srcRect.w = 2400.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    if (start == 1) {
        fx2 = &xpos;
        fy2 = &ypos;
    }

    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

    for (int i = 0; i < speed_fall2; i++)
    {
        if ((i / 5 == 0) or (i / 3 == 0)) {
            continue;
        }
        else if (xpos > 350) {
            xpos = -280;
        }
        else if (ypos < 400)
        {
            ypos += 0.08;
        }
        else if (ypos <= 450)
        {
            ypos = -400.0;
            xpos += 30;
            speed_fall2 = speed_fall2 + 2;
        }
    }
}



void GameObject::Fall3()
{
    srcRect.h = 1800.0;
    srcRect.w = 2400.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    if (start == 1) {
        fx3 = &xpos;
        fy3 = &ypos;
    }

    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

    for (int i = 0; i < speed_fall3; i++)
    {
        if (i / 2 == 0) {
            continue;
        }
        else if (xpos > 350) {
            xpos = -200;
        }
        else if (ypos < 400)
        {
            ypos += 0.08;
        }
        else if (ypos <= 450)
        {
            ypos = -400.0;
            xpos += 40;
            speed_fall3 = speed_fall3 + 2;
        }
    }
}



void GameObject::Fallbump()
{
    srcRect.h = 1200.0;
    srcRect.w = 1600.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    bx1 = &xpos;
    by1 = &ypos;
    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

    for (int i = 0; i < speed_fallbump; i++)
    {
        if (i / 2 == 0) {
            continue;
        }
        else if (xpos > 450) {
            xpos = 100;
        }
        else if (ypos < 400)
        {
            ypos += 0.08;
        }
        else if (ypos <= 450)
        {
            ypos = -400.0;
            xpos += 30;
            speed_fallbump = speed_fallbump + 2;
        }
    }
}

void GameObject::Fallbump2()
{
    srcRect.h = 1200.0;
    srcRect.w = 1600.0;
    srcRect.x = 0.0;
    srcRect.y = 0.0;

    destRect.x = xpos;
    destRect.y = ypos;
    bx2 = &xpos;
    by2 = &ypos;
    destRect.w = srcRect.w / 3;
    destRect.h = srcRect.h / 3;

    for (int i = 0; i < speed_fallbump2; i++)
    {
        if ((i / 5 == 0) or (i / 3 == 0)) {
            continue;
        }
        if (xpos > 500) {
            xpos = -300;
        }
        else if (ypos < 400)
        {
            ypos += 0.05;
        }
        else if (ypos > 300)
        {
            ypos = -400.0;
            xpos += 60;
            speed_fallbump2 = speed_fallbump2 + 2;
        }
    }
}


void GameObject::Render()
{
    SDL_RenderCopy(renderer, objTexture, &srcRect, &destRect);
}
//int CollideCat();
int CollideCat()
{
    int score = 0;
    if (((*fx1 + 120 <= *px1 + 84) && (*fx1 + 120 >= *px1 - 84)) || ((*fx1 - 120 >= *px1 - 84) && (*fx1 - 120 <= *px1 + 84))) {
        if (((*fy1 + 9 <= *py1 + 6) && (*fy1 + 9 >= *py1 - 6)) || ((*fy1 - 9 <= *py1 + 6) && (*fy1 - 9 >= *py1 - 6))) {
            score = score + 1;

        }
    }
    if (((*fx2 + 120 <= *px1 + 84) && (*fx2 + 120 >= *px1 - 84)) || ((*fx2 - 120 >= *px1 - 84) && (*fx2 - 120 <= *px1 + 84))) {
        if (((*fy2 + 9 <= *py1 + 6) && (*fy2 + 9 >= *py1 - 6)) || ((*fy2 - 9 <= *py1 + 6) && (*fy2 - 9 >= *py1 - 6))) {
            score = score + 1;

        }
    }
    if (((*fx3 + 120 <= *px1 + 84) && (*fx3 + 120 >= *px1 - 84)) || ((*fx3 - 120 >= *px1 - 84) && (*fx3 - 120 <= *px1 + 84))) {
        if (((*fy3 + 9 <= *py1 + 6) && (*fy3 + 9 >= *py1 - 6)) || ((*fy3 - 9 <= *py1 + 6) && (*fy3 - 9 >= *py1 - 6))) {

            score = score + 1;
        }
    }
    return score;

}
int CollideBump()
{

    if (((*bx1 + 50 <= *px1 + 84) && (*bx1 + 50 >= *px1 - 84)) || ((*bx1 - 50 >= *px1 - 84) && (*bx1 - 50 <= *px1 + 84))) {
        if (((*by1 + 5 <= *py1 + 5) && (*by1 + 5 >= *py1 - 10)) || ((*by1 - 5 <= *py1 + 10) && (*by1 - 5 >= *py1 - 10))  /**by1 == *py1*/) {
            return 1;
        }
    }
    if (((*bx2 + 50 <= *px1 + 84) && (*bx2 + 50 >= *px1 - 84)) || ((*bx2 - 50 >= *px1 - 84) && (*bx2 - 50 <= *px1 + 84))) {
        if (((*by2 + 5 <= *py1 + 10) && (*by2 + 5 >= *py1 - 10)) || ((*by2 - 5 <= *py1 + 10) && (*by2 - 5 >= *py1 - 10)) /**by2 == *py1*/) {
            return 1;
        }
    }

}
const int SCREEN_WIDTH3 = 800;
const int SCREEN_HEIGHT3 = 600;


SDL_Window* window3 = nullptr;
SDL_Renderer* renderer3 = nullptr;

SDL_Texture* LoadImage3(std::string file)
{
    SDL_Texture* tex3 = nullptr;
    tex3 = IMG_LoadTexture(renderer3, file.c_str());
    if (tex3 == nullptr)
        throw std::runtime_error("Failed to load image: " + file + IMG_GetError());
    return tex3;
}

void ApplySurface(int x3, int y3, SDL_Texture* tex3, SDL_Renderer* rend3)
{
    SDL_Rect pos;
    pos.x = x3;
    pos.y = y3;
    SDL_QueryTexture(tex3, NULL, NULL, &pos.w, &pos.h);
    SDL_RenderCopy(rend3, tex3, NULL, &pos);
}


const int SCREEN_WIDTH4 = 800;
const int SCREEN_HEIGHT4 = 600;

SDL_Window* window4 = nullptr;
SDL_Renderer* renderer4 = nullptr;

SDL_Texture* LoadImage4(std::string file)
{
    SDL_Texture* tex4 = nullptr;
    tex4 = IMG_LoadTexture(renderer4, file.c_str());
    if (tex4 == nullptr)
        throw std::runtime_error("Failed to load image: " + file + IMG_GetError());
    return tex4;
}

void ApplySurface4(int x4, int y4, SDL_Texture* tex4, SDL_Renderer* rend4)
{
    SDL_Rect pos;
    pos.x = x4;
    pos.y = y4;
    SDL_QueryTexture(tex4, NULL, NULL, &pos.w, &pos.h);
    SDL_RenderCopy(rend4, tex4, NULL, &pos);
}







GameObject* player;
GameObject* bg;
GameObject* bg1;
GameObject* trash;
GameObject* trash2;
GameObject* trash3;
GameObject* dog;
GameObject* dog2;
GameObject* zerostar;
GameObject* onestar;
GameObject* twostar;
GameObject* threestar;
GameObject* fourstar;
GameObject* fivestar;



int main(int argc, char** argv)

{
    startpage();

    fullscreen = false;
    int flags = 0;
    flags = SDL_WINDOW_RESIZABLE;
    if (fullscreen) {
        flags = flags | SDL_WINDOW_FULLSCREEN;
    }
    if (SDL_Init(SDL_INIT_EVERYTHING) == 0) {
        std::cout << "Subsystems Initialized!\n";

        window = SDL_CreateWindow("Test Window", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 800, 600, flags);

        if (window) {
            std::cout << "Window Created!\n";
            SDL_SetWindowMinimumSize(window, 100, 100);
        }
        renderer = SDL_CreateRenderer(window, -1, 0);
        if (renderer) {
            SDL_SetRenderDrawColor(renderer, 255, 255, 255, 150);
            std::cout << "Renderer created!\n";
            SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_BLEND);
            isRunning = true;
        }

        int playerW = 1000, playerH = 600;
        SDL_GetRendererOutputSize(renderer, &windowW, &windowH);

        player = new GameObject("cloud.png", renderer, 100, 290, playerH, playerW);
        bg = new GameObject("bg.png", renderer, 0, 0, playerH, playerW);
        trash = new GameObject("cat.png", renderer, -350, -350, playerH, playerW);
        trash2 = new GameObject("cat.png", renderer, 200, -350, playerH, playerW);
        trash3 = new GameObject("cat.png", renderer, 350, -350, playerH, playerW);
        dog = new GameObject("planet.png", renderer, -50, -300, playerH, playerW);
        dog2 = new GameObject("planet.png", renderer, 450, -300, playerH, playerW);
        bg1 = new GameObject("bg1.png", renderer, 0, 0, playerH, playerW);
        zerostar = new GameObject("end_0star.png", renderer, 0, 0, playerH, playerW);
        onestar = new GameObject("end_1star.png", renderer, 0, 0, playerH, playerW);
        twostar = new GameObject("end_2star.png", renderer, 0, 0, playerH, playerW);
        threestar = new GameObject("end_3star.png", renderer, 0, 0, playerH, playerW);
        fourstar = new GameObject("end_4star.png", renderer, 0, 0, playerH, playerW);
        fivestar = new GameObject("end_5star.png", renderer, 0, 0, playerH, playerW);

        std::cout << "windowH: " << windowH << std::endl;
        std::cout << "windowW: " << windowW << std::endl;
        std::cout << "playerH: " << playerH << std::endl;
        start = 1;


    }

    const int FPS = 60;
    const int frameDelay = 400 / FPS; //max time between frames

    Uint32 frameStart;
    int frameTime;


    int scoreans = 0;

    while (isRunning) {



        frameStart = SDL_GetTicks(); //how many miliseconds from we first initialized


        handleEvents();
        update();
        render();//讀圖片



        scoreans = scoreans + CollideCat();
        globalscore = scoreans;
        frameTime = SDL_GetTicks() - frameStart;

        if (frameDelay > frameTime) // To smoothen our the movement
        {
            SDL_Delay(frameDelay - frameTime);
        }

    }
    cout << globalscore << endl << endl;
    //globalscore = scoreans;

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}

void handleEvents() {


    SDL_PollEvent(&event);


    switch (event.type) {
    case SDL_QUIT:
        isRunning = false;
        break;
    default:
        break;
    }
}

void render() {
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    SDL_RenderClear(renderer);

    if (CollideBump() == 1) {
        if (globalscore < 0) {
            zerostar->Render();
        }
        if (globalscore >= 0 && globalscore < 5) {
            onestar->Render();
        }
        else if (globalscore >= 5 && globalscore < 30) {
            twostar->Render();
        }
        else if (globalscore >= 30 && globalscore < 70) {
            threestar->Render();
        }
        else if (globalscore >= 70 && globalscore < 100) {
            fourstar->Render();
        }
        else if (globalscore >= 100) {
            fivestar->Render();
        }
        //bg1->Render();
        isRunning = false;
        SDL_Quit();

        handleEvents();
        if (SDL_Init(SDL_INIT_EVERYTHING) == -1)
        {
            std::cout << SDL_GetError() << std::endl;

        }

        window3 = SDL_CreateWindow("Lesson 3",
            SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
            SCREEN_WIDTH3, SCREEN_HEIGHT3, SDL_WINDOW_SHOWN);
        if (window3 == nullptr)
        {
            std::cout << SDL_GetError() << std::endl;

        }

        renderer3 = SDL_CreateRenderer(window3, -1,
            SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
        if (renderer3 == nullptr)
        {
            std::cout << SDL_GetError() << std::endl;

        }

        SDL_Texture* background = nullptr;
        if (globalscore >= 0) {
            try {
                background = LoadImage3("end_0star.png");

            }
            catch (const std::runtime_error& e) {
                std::cout << e.what() << std::endl;

            }
        }
        else if (globalscore > 0 && globalscore < 5) {
            try {
                background = LoadImage3("end_1star.png");

            }
            catch (const std::runtime_error& e) {
                std::cout << e.what() << std::endl;

            }
        }
        else if (globalscore >= 5 && globalscore < 30) {
            try {
                background = LoadImage3("end_2star.png");

            }
            catch (const std::runtime_error& e) {
                std::cout << e.what() << std::endl;

            }
        }
        else if (globalscore >= 30 && globalscore < 70) {
            try {
                background = LoadImage3("end_3star.png");

            }
            catch (const std::runtime_error& e) {
                std::cout << e.what() << std::endl;

            }
        }
        else if (globalscore >= 70 && globalscore < 100) {
            try {
                background = LoadImage3("end_4star.png");

            }
            catch (const std::runtime_error& e) {
                std::cout << e.what() << std::endl;

            }
        }
        else if (globalscore >= 100) {
            try {
                background = LoadImage3("end_5star.png");

            }
            catch (const std::runtime_error& e) {
                std::cout << e.what() << std::endl;

            }
        }


        SDL_RenderClear(renderer3);

        int bW, bH;
        SDL_QueryTexture(background, NULL, NULL, &bW, &bH);
        for (int y = 0; y <= SCREEN_HEIGHT3; y += bH)
            for (int x = 0; x <= SCREEN_WIDTH3; x += bW)
                ApplySurface(x, y, background, renderer3);

        SDL_RenderPresent(renderer3);


        SDL_Delay(10000);

        SDL_DestroyTexture(background);

        SDL_DestroyRenderer(renderer3);
        SDL_DestroyWindow(window3);

        SDL_Quit();
    }
    else {
        bg->Render();
        player->Render();
        trash->Render();
        trash2->Render();
        trash3->Render();
        dog->Render();
        dog2->Render();


    }


    //END*****************************************************************************************

     //your stuff to render would typically go here.
    SDL_RenderPresent(renderer);
}

void startpage() {
    if (SDL_Init(SDL_INIT_EVERYTHING) == -1)
    {
        std::cout << SDL_GetError() << std::endl;
    }

    window4 = SDL_CreateWindow("Lesson 4",
        SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
        SCREEN_WIDTH4, SCREEN_HEIGHT4, SDL_WINDOW_SHOWN);
    if (window4 == nullptr)
    {
        std::cout << SDL_GetError() << std::endl;

    }


    renderer4 = SDL_CreateRenderer(window4, -1,
        SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (renderer4 == nullptr)
    {
        std::cout << SDL_GetError() << std::endl;

    }


    SDL_Texture* background4 = nullptr;
    try {
        background4 = LoadImage4("bg4.png");

    }
    catch (const std::runtime_error& e) {
        std::cout << e.what() << std::endl;

    }

    SDL_RenderClear(renderer4);

    int bW4, bH4;
    SDL_QueryTexture(background4, NULL, NULL, &bW4, &bH4);
    for (int y = 0; y <= SCREEN_HEIGHT4; y += bH4)
        for (int x = 0; x <= SCREEN_WIDTH4; x += bW4)
            ApplySurface4(x, y, background4, renderer4);

    SDL_RenderPresent(renderer4);


    SDL_Delay(5000);

    SDL_DestroyTexture(background4);

    SDL_DestroyRenderer(renderer4);
    SDL_DestroyWindow(window4);

    SDL_Quit();

}

void update() {


    player->Update();
    bg->Update2();
    bg1->Update3();
    zerostar->Updatestar0();
    onestar->Updatestar1();
    twostar->Updatestar2();
    threestar->Updatestar3();
    fourstar->Updatestar4();
    fivestar->Updatestar5();
    trash->Fall();
    trash2->Fall2();
    trash3->Fall3();
    dog->Fallbump();
    dog2->Fallbump2();


}
